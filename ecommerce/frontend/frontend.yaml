---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  namespace: ecommerce-frontend
data:
  PORT: "3000"
  USER_SERVICE_URL: "http://user-service.ecommerce-backend.svc.cluster.local:3001"
  PRODUCT_SERVICE_URL: "http://product-service.ecommerce-backend.svc.cluster.local:3002"
  ORDER_SERVICE_URL: "http://order-service.ecommerce-backend.svc.cluster.local:3003"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: ecommerce-frontend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: nginx:alpine
        ports:
        - containerPort: 80
        volumeMounts:
        - name: frontend-content
          mountPath: /usr/share/nginx/html
        - name: nginx-config
          mountPath: /etc/nginx/conf.d
        - name: product-images
          mountPath: /usr/share/nginx/html/images
      volumes:
      - name: frontend-content
        configMap:
          name: frontend-html
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: product-images
        configMap:
          name: product-images
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: ecommerce-frontend
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: ecommerce-frontend
data:
  default.conf: |
    server {
        listen 80;
        server_name localhost;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
            try_files $uri $uri/ /index.html;
        }
        
        location /api/users/ {
            proxy_pass http://user-service.ecommerce-backend.svc.cluster.local:3001/;
        }
        
        location /api/products/ {
            proxy_pass http://product-service.ecommerce-backend.svc.cluster.local:3002/;
        }
        
        location /api/orders/ {
            proxy_pass http://order-service.ecommerce-backend.svc.cluster.local:3003/;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-html
  namespace: ecommerce-frontend
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>E-Commerce Demo</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
            .container { max-width: 1200px; margin: 0 auto; }
            .header { background: #333; color: white; padding: 1rem; margin-bottom: 2rem; }
            .nav { display: flex; gap: 1rem; margin-bottom: 2rem; }
            .nav button { padding: 0.5rem 1rem; cursor: pointer; }
            .section { display: none; }
            .section.active { display: block; }
            .product-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(250px, 1fr)); gap: 1rem; }
            .product-card { border: 1px solid #ddd; padding: 1rem; border-radius: 5px; text-align: center; }
            .product-image { width: 200px; height: 150px; object-fit: cover; border-radius: 5px; margin-bottom: 0.5rem; }
            .form-group { margin-bottom: 1rem; }
            .form-group input { width: 100%; padding: 0.5rem; }
            button { background: #007bff; color: white; border: none; padding: 0.5rem 1rem; cursor: pointer; }
            .cart-item { display: flex; justify-content: space-between; padding: 0.5rem; border-bottom: 1px solid #eee; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>E-Commerce Demo - Kubernetes Learning</h1>
                <div id="user-info"></div>
            </div>
            
            <div class="nav">
                <button onclick="showSection('products')">Products</button>
                <button onclick="showSection('cart')">Cart</button>
                <button onclick="showSection('orders')">Orders</button>
                <button onclick="showSection('auth')">Login/Register</button>
            </div>
            
            <div id="products" class="section active">
                <h2>Product Catalog</h2>
                <input type="text" id="search" placeholder="Search products..." onkeyup="searchProducts()">
                <div id="product-list" class="product-grid"></div>
            </div>
            
            <div id="cart" class="section">
                <h2>Shopping Cart</h2>
                <div id="cart-items"></div>
                <button onclick="checkout()">Checkout</button>
            </div>
            
            <div id="orders" class="section">
                <h2>Order History</h2>
                <div id="order-list"></div>
            </div>
            
            <div id="auth" class="section">
                <h2>Authentication</h2>
                <div id="login-form">
                    <h3>Login</h3>
                    <div class="form-group">
                        <input type="email" id="login-email" placeholder="Email">
                    </div>
                    <div class="form-group">
                        <input type="password" id="login-password" placeholder="Password">
                    </div>
                    <button onclick="login()">Login</button>
                </div>
                
                <div id="register-form">
                    <h3>Register</h3>
                    <div class="form-group">
                        <input type="text" id="register-username" placeholder="Username">
                    </div>
                    <div class="form-group">
                        <input type="email" id="register-email" placeholder="Email">
                    </div>
                    <div class="form-group">
                        <input type="password" id="register-password" placeholder="Password">
                    </div>
                    <button onclick="register()">Register</button>
                </div>
            </div>
        </div>
        
        <script>
            let currentUser = null;
            let cart = [];
            
            function showSection(sectionId) {
                document.querySelectorAll('.section').forEach(s => s.classList.remove('active'));
                document.getElementById(sectionId).classList.add('active');
                
                if (sectionId === 'products') loadProducts();
                if (sectionId === 'cart') loadCart();
                if (sectionId === 'orders') loadOrders();
            }
            
            async function loadProducts() {
                try {
                    const response = await fetch('/api/products/products');
                    const products = await response.json();
                    displayProducts(products);
                } catch (error) {
                    console.error('Error loading products:', error);
                }
            }
            
            function displayProducts(products) {
                const productList = document.getElementById('product-list');
                const productsWithImages = products.filter(product => product.image);
                productList.innerHTML = productsWithImages.map(product => `
                    <div class="product-card">
                        <img src="${product.image}" alt="${product.name}" class="product-image">
                        <h3>${product.name}</h3>
                        <p>${product.description}</p>
                        <p><strong>Price: $${product.price}</strong></p>
                        <p>Stock: ${product.stock}</p>
                        <button onclick="addToCart('${product._id}', '${product.name}', ${product.price})">Add to Cart</button>
                    </div>
                `).join('');
            }
            
            async function addToCart(productId, name, price) {
                if (!currentUser) {
                    alert('Please login first');
                    return;
                }
                
                try {
                    await fetch(`/api/orders/cart/${currentUser.id}/add`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ productId, name, price, quantity: 1 })
                    });
                    alert('Added to cart!');
                } catch (error) {
                    console.error('Error adding to cart:', error);
                }
            }
            
            async function loadCart() {
                if (!currentUser) return;
                
                try {
                    const response = await fetch(`/api/orders/cart/${currentUser.id}`);
                    const cart = await response.json();
                    displayCart(cart.items || []);
                } catch (error) {
                    console.error('Error loading cart:', error);
                }
            }
            
            function displayCart(items) {
                const cartItems = document.getElementById('cart-items');
                cartItems.innerHTML = items.map(item => `
                    <div class="cart-item">
                        <span>${item.name} x ${item.quantity}</span>
                        <span>$${item.price * item.quantity}</span>
                        <button onclick="removeFromCart('${item.productId}')">Remove</button>
                    </div>
                `).join('');
            }
            
            async function login() {
                const email = document.getElementById('login-email').value;
                const password = document.getElementById('login-password').value;
                
                try {
                    const response = await fetch('/api/users/login', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, password })
                    });
                    
                    if (response.ok) {
                        const data = await response.json();
                        currentUser = data.user;
                        document.getElementById('user-info').innerHTML = `Welcome, ${currentUser.username}!`;
                        showSection('products');
                    } else {
                        alert('Login failed');
                    }
                } catch (error) {
                    console.error('Login error:', error);
                }
            }
            
            async function register() {
                const username = document.getElementById('register-username').value;
                const email = document.getElementById('register-email').value;
                const password = document.getElementById('register-password').value;
                
                try {
                    const response = await fetch('/api/users/register', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ username, email, password })
                    });
                    
                    if (response.ok) {
                        alert('Registration successful! Please login.');
                    } else {
                        alert('Registration failed');
                    }
                } catch (error) {
                    console.error('Registration error:', error);
                }
            }
            
            async function removeFromCart(productId) {
                if (!currentUser) return;
                
                try {
                    await fetch(`/api/orders/cart/${currentUser.id}/remove/${productId}`, {
                        method: 'DELETE'
                    });
                    loadCart();
                } catch (error) {
                    console.error('Error removing from cart:', error);
                }
            }
            
            async function checkout() {
                if (!currentUser) {
                    alert('Please login first');
                    return;
                }
                
                try {
                    const cartResponse = await fetch(`/api/orders/cart/${currentUser.id}`);
                    const cart = await cartResponse.json();
                    
                    if (!cart.items || cart.items.length === 0) {
                        alert('Cart is empty');
                        return;
                    }
                    
                    const total = cart.items.reduce((sum, item) => sum + (item.price * item.quantity), 0);
                    
                    const orderResponse = await fetch('/api/orders/orders', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            userId: currentUser.id,
                            items: cart.items,
                            total: total
                        })
                    });
                    
                    if (orderResponse.ok) {
                        alert('Order placed successfully!');
                        loadCart();
                        showSection('orders');
                    } else {
                        alert('Order failed');
                    }
                } catch (error) {
                    console.error('Checkout error:', error);
                    alert('Checkout failed');
                }
            }
            
            async function loadOrders() {
                if (!currentUser) return;
                
                try {
                    const response = await fetch(`/api/orders/orders/${currentUser.id}`);
                    const orders = await response.json();
                    displayOrders(orders);
                } catch (error) {
                    console.error('Error loading orders:', error);
                }
            }
            
            function displayOrders(orders) {
                const orderList = document.getElementById('order-list');
                orderList.innerHTML = orders.map(order => `
                    <div style="border: 1px solid #ddd; padding: 1rem; margin-bottom: 1rem; border-radius: 5px;">
                        <h4>Order #${order._id.slice(-6)}</h4>
                        <p>Status: ${order.status}</p>
                        <p>Total: $${order.total}</p>
                        <p>Date: ${new Date(order.createdAt).toLocaleDateString()}</p>
                        <div>
                            ${order.items.map(item => `
                                <div>${item.name} x ${item.quantity} - $${item.price * item.quantity}</div>
                            `).join('')}
                        </div>
                    </div>
                `).join('');
            }
            
            async function searchProducts() {
                const search = document.getElementById('search').value;
                try {
                    const response = await fetch(`/api/products/products?search=${encodeURIComponent(search)}`);
                    const products = await response.json();
                    displayProducts(products);
                } catch (error) {
                    console.error('Error searching products:', error);
                }
            }
            
            // Initialize
            loadProducts();
        </script>
    </body>
    </html>