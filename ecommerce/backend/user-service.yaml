---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-config
  namespace: ecommerce-backend
data:
  MONGODB_URI: "mongodb://admin:password123@mongodb-service.ecommerce-database.svc.cluster.local:27017/ecommerce?authSource=admin"
  PORT: "3001"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service
  namespace: ecommerce-backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
    spec:
      containers:
      - name: user-service
        image: node:16-alpine
        command: ["/bin/sh"]
        args: ["-c", "cp /code/* /app/ && cd /app && npm init -y && npm install express mongoose bcryptjs jsonwebtoken && node server.js"]
        ports:
        - containerPort: 3001
        envFrom:
        - configMapRef:
            name: user-service-config
        volumeMounts:
        - name: app-code
          mountPath: /code
        - name: app-workspace
          mountPath: /app
        workingDir: /app
      volumes:
      - name: app-code
        configMap:
          name: user-service-code
      - name: app-workspace
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
  namespace: ecommerce-backend
spec:
  selector:
    app: user-service
  ports:
  - port: 3001
    targetPort: 3001
  type: ClusterIP
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-code
  namespace: ecommerce-backend
data:
  server.js: |
    const express = require('express');
    const mongoose = require('mongoose');
    const bcrypt = require('bcryptjs');
    const jwt = require('jsonwebtoken');
    
    const app = express();
    app.use(express.json());
    
    mongoose.connect(process.env.MONGODB_URI);
    
    const userSchema = new mongoose.Schema({
      username: { type: String, required: true, unique: true },
      email: { type: String, required: true, unique: true },
      password: { type: String, required: true }
    });
    
    const User = mongoose.model('User', userSchema);
    
    app.post('/register', async (req, res) => {
      try {
        const { username, email, password } = req.body;
        const hashedPassword = await bcrypt.hash(password, 10);
        const user = new User({ username, email, password: hashedPassword });
        await user.save();
        res.status(201).json({ message: 'User registered successfully' });
      } catch (error) {
        res.status(400).json({ error: error.message });
      }
    });
    
    app.post('/login', async (req, res) => {
      try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        if (!user || !await bcrypt.compare(password, user.password)) {
          return res.status(401).json({ error: 'Invalid credentials' });
        }
        const token = jwt.sign({ userId: user._id }, 'secret', { expiresIn: '1h' });
        res.json({ token, user: { id: user._id, username: user.username, email: user.email } });
      } catch (error) {
        res.status(400).json({ error: error.message });
      }
    });
    
    app.listen(process.env.PORT, () => {
      console.log(`User service running on port ${process.env.PORT}`);
    });